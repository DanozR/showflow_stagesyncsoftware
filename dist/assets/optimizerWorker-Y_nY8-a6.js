(function(){"use strict";self.onmessage=n=>{const{classes:i,minGap:c,type:o}=n.data;if(o==="optimize"){const s=b(i,c);self.postMessage(s)}};const b=(n,i)=>{const c=n.filter(e=>e.included);if(c.length===0)return{orderedClasses:[],conflicts:[]};const o=c.filter(e=>e.locked&&e.position!==null),s=c.filter(e=>!e.locked||e.position===null);if(o.sort((e,l)=>(e.position||0)-(l.position||0)),s.length===0)return{orderedClasses:o,conflicts:C(o,i)};const a=5;let t=[],f=[],d=-1/0;for(let e=0;e<a;e++){const l=[...o],r=[...s];e>0?E(r):r.sort((p,g)=>g.students.length-p.students.length);const{orderedClasses:m,conflicts:h}=M(l,r,i),u=w(h,i);u>d&&(d=u,t=m,f=h)}return t.forEach((e,l)=>{e.locked||(e.position=l)}),{orderedClasses:t,conflicts:f}};function E(n){for(let i=n.length-1;i>0;i--){const c=Math.floor(Math.random()*(i+1));[n[i],n[c]]=[n[c],n[i]]}}function w(n,i){if(n.length===0)return 1e4;const c=new Map;for(let t=0;t<i;t++)c.set(t,0);n.forEach(t=>{c.set(t.gap,(c.get(t.gap)||0)+1)});let o=0;const s=c.get(0)||0;o-=s*1e3;for(let t=1;t<i;t++){const f=c.get(t)||0;o-=f*(100/t)}o-=n.length*10;const a=new Set(n.map(t=>t.studentId)).size;return o-=a*50,o}function M(n,i,c){const o=new Map,s=[...n];for(n.forEach((t,f)=>{t.students.forEach(d=>{o.set(d.id,f)})});i.length>0;){let t=null,f=-1,d=-1/0;for(const e of i)for(let l=0;l<=s.length;l++){if(l<s.length&&s[l].locked)continue;let r=0,m=0;for(const h of e.students){const u=o.get(h.id);if(u!==void 0){const p=l-u-1;p===0&&m++,p===0?r-=5e3:p<c?r-=Math.pow(c-p,3)*100:r+=10}else r+=5}if(l<s.length){const h=[...s];h.splice(l,0,e);const u=new Map(o);e.students.forEach(g=>{u.set(g.id,l)});const p=h[l+1];for(const g of p.students){const k=u.get(g.id);k!==void 0&&k===l&&(r-=5e3)}}m===0&&(r+=1e3),r>d&&(d=r,f=l,t=e)}if(!t)break;i.splice(i.indexOf(t),1),s.splice(f,0,t),t.students.forEach(e=>{o.set(e.id,f)});for(let e=f+1;e<s.length;e++)s[e].locked||(s[e].position=e)}const a=C(s,c);return{orderedClasses:s,conflicts:a}}function C(n,i){const c=[],o=new Map;return n.forEach((s,a)=>{s.students.forEach(t=>{o.has(t.id)||o.set(t.id,[]),o.get(t.id).push(a)})}),o.forEach((s,a)=>{for(let t=0;t<s.length-1;t++){const f=s[t+1]-s[t]-1;if(f<i){const d=n[s[t]].students.find(e=>e.id===a);d&&c.push({studentId:a,studentName:`${d.firstName} ${d.lastName}`,classNames:[n[s[t]].name,n[s[t+1]].name],gap:f})}}}),c}})();
